% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/custom-component.R
\name{custom_pipe_component}
\alias{custom_pipe_component}
\title{Custom pipeline component}
\usage{
custom_pipe_component(classname = "custom", fit = NULL, transform = NULL,
  predict = NULL, incr_fit = NULL, inv_transform = NULL,
  predict_proba = NULL, initialize = NULL, ..., as_private = character(0))
}
\arguments{
\item{classname}{string of class name}

\item{fit}{fit function}

\item{transform}{transform function}

\item{predict}{predict function}

\item{incr_fit}{incremantal fit function}

\item{inv_transform}{inverse-transform function}

\item{predict_proba}{probability predict function}

\item{initialize}{intialize function}

\item{...}{additional class attributes, they must be given with names and there must be no name conflict}

\item{as_private}{names of additional parameters to be stored as private fields}
}
\value{
an R6ClassGenerator
}
\description{
Used to define a custom pipeline component.  Users can define functions \code{fit}, \code{transform}, \code{predict}, or \code{incfit} with desired behavior.
}
\details{
This function is used to define a custom pipeline component.
Users can define functions with desired behavior, together with addional public and private fields.

To be properly incorporated to a pipeline framework, the functions should satisfy the following properties:
\itemize{
\item{\code{fit}, \code{incr_fit}, \code{transform}, \code{predict}, \code{inv_transform} and \code{predict_proba} functions should take exactly two arguments \code{x} and \code{y}}
\item{\code{initialize}, \code{fit} and \code{incr_fit} functions should return \code{invisible(self)}}
\item{\code{transform} and \code{inv_transform} functions should return a list of \code{x} and \code{y}}
}
Typically, \code{self$object} is used to store the fitted model object, and is updated by \code{fit} and \code{incr_fit} functions.  Alternatively, one may also define additional class attributes to store relevant information.
}
\examples{
OLSPipe <- custom_pipe_component(
  fit = function(x, y) {
    x <- cbind(as.matrix(x), 1)
    self$object <- solve(crossprod(x), crossprod(x,y))
    invisible(self)
   },
  predict = function(x, y=NULL) {
    cbind(as.matrix(x), 1) \%*\% self$object
  }
)
o <- OLSPipe$new()
data(mtcars)
x <- mtcars[, c('wt', 'am')]
y <- mtcars[['mpg']]
o$fit(x, y)
o$predict(x)

MeanCalculator <- custom_pipe_component(
  fit = function(x, y=NULL) {
    self$sum <- sum(x)
    self$n <- length(x)
    invisible(self)
  },
  incr_fit = function(x, y=NULL) {
    self$n <- self$n + length(x)
    self$sum <- self$sum + sum(x)
    invisible(self)
  },
  predict = function(x=NULL, y=NULL) {
    self$sum / self$n
  },
  initialize = function() {
    invisible(self)
  },
  sum=0, n=0
)
m <- MeanCalculator$new()
m$fit(1:9)
m$predict()
m$incr_fit(10)
m$predict()
}

