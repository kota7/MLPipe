% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/feature-standardize.R
\name{feature_standardizer}
\alias{FeatureStandardizer}
\alias{feature_standardizer}
\title{Feature-wise standardization}
\description{
Standardize each feature of data. Three methodologies are supported:
\itemize{
\item{"l2": standardize to zero-mean, unit-variance}
\item{"l1": standardize to zero-mean, unit-MAD (mean absolute deviation)}
\item{"range": standardize to unit interval range}
}
}
\section{Usage}{

\preformatted{feature_standardizer(method = 'l2', tol = sqrt(.Machine$double.eps)}
}

\section{Arguments}{

\describe{
\item{method}{either "l2", "l1" or "range"}
\item{tol}{positive real number, scaling is not conducted if scale is below this level}
}
}

\section{Value}{

\code{FeatureStandardizer} class object
}

\section{Details}{

When fitted to data, the feature-wise centers and scales are stored in the object,
and transformation is conducted using these center and scale values.
Therefore, when applied to new data, they are not exactly standardized.

Uses \code{\link[lsr]{aad}} as the backend calculation for "l1" method
}
\examples{
data(mtcars)
# zero-mean, unit-variance standardization
fs <- feature_standardizer(method='l2')
fs$fit(mtcars)
z <- fs$transform(mtcars)$x
apply(z, MARGIN=2, FUN=mean)
apply(z, MARGIN=2, FUN=sd)

# zero-mean, unit-MAD (mean absolute deviation)
fs <- feature_standardizer(method='l1')
fs$fit(mtcars)
z <- fs$transform(mtcars)$x
apply(z, MARGIN=2, FUN=mean)
apply(z, MARGIN=2, FUN=lsr::aad)

# standardize to unit interval
fs$set_parameters(method='range')
fs$fit(mtcars)
z <- fs$transform(mtcars)$x
apply(z, MARGIN=2, FUN=range)
}

